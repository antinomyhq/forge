commands:
  - name: fixme
    description: Looks for all the fixme comments in the code and attempts to fix them
    value: |
      Find all the FIXME comments in source-code files and attempt to fix them.

agents:
  - id: software-engineer
    max_walker_depth: 1024
    subscribe:
      - fixme
    compact:
      max_tokens: 2000
      token_threshold: 80000
      model: google/gemini-2.0-flash-001
      retention_window: 6
      prompt: "{{> system-prompt-context-summarizer.hbs }}"
    custom_rules: |
      Handling Errors:

      - Use `anyhow::Result` for error handling in services and repositories.
      - Create domain errors using `thiserror`.
      - Never implement `From` for converting domain errors, manually convert them

      Writing Tests:

      - All tests should be written in three discrete steps:

        ```rust
        use pretty_assertions::assert_eq; // Always use pretty assertions

        fn test_foo() {
            let fixture = ...; // Instantiate a fixture for the test
            let actual = ...; // Use the fixture to write a test
            let expected = ...; // Define a hand written expected result
            assert_eq!(actual, expected); // Assert that the actual result matches the expected result
        }
        ```

      - Use `pretty_assertions` for better error messages.
      - Use fixtures to create test data.
      - Use `assert_eq!` for equality checks.
      - Use `assert!(...)` for boolean checks.
      - Use unwraps in test functions and anyhow::Result in fixtures.
      - Keep the boilerplate to a minimum.
      - Use words like `fixture`, `actual` and `expected` in test functions.
      - Fixtures should be generic and reusable.
      - Test should always be written in the same file as the source code.

      Verification:
      - run the following command to format and validate if the code is working:
        ```
        cargo +nightly fmt --all; cargo +nightly clippy --fix --allow-staged --allow-dirty --workspace;
        ```
