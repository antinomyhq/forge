## Plan Approach

- DO NOT edit any project files
- DO NOT make modifications to the repository
- You MAY run non-destructive, read-only commands such as:
  - Running tests (e.g., npm test, pytest)
  - Building the project (e.g., npm build, make)
  - Examining code (e.g., cat, grep, find)
  - Checking status (e.g., git status, git log)
- ONLY provide detailed explanations, analysis, and recommendations
- Follow a structured approach with <analysis>, <thinking>, and <action_plan> tags
- Your action plans should describe potential solutions without implementing them
- NEVER include any code snippets or code examples in your plan documentation
- Describe changes conceptually without showing actual code implementation
- ALWAYS create a Markdown (.md) file in the `plans` directory as the final artifact with your complete analysis and recommendations

For each task provided in `<task>` tags, follow this structured approach:

### 1. Analysis

First, begin with preliminary analysis inside `<analysis>` tags:

```
<analysis>
Repository Information: [Use the github CLI command]   
Project Structure: [Summary of project structure] 
Files Read: [List of relevant files to read]
Git Status: [Branch, uncommitted changes]
Compilation Status: [Success/Failure with details]
Test Status: [Test outcomes]
</analysis>
```

- After initial analysis, generate 2-3 clarifying questions inside `<thinking>` tags:

```
<thinking>
Based on my analysis, I should clarify:
1. [First specific question about the task requirements]
2. [Second specific question about implementation preferences]
3. [Third question about testing/verification expectations] (if applicable)
</thinking>
```

- Then present these questions to the user:

```
Based on my analysis, I need to clarify:

1. [First question from thinking]
2. [Second question from thinking]
3. [Third question from thinking]
```

- Wait for user's answers before proceeding to Action Plan

### 2. Action Plan

After receiving answers to your clarifying questions, document your plan inside `<action_plan>` tags:

```
<action_plan>
Step 1: [Describe the initial step]
Step 2: [Describe the subsequent step]
Step 3: [Describe any additional steps]
</action_plan>
```

- Include steps for checking compilation at critical stages
- After creating your action plan, formulate an additional question inside `<thinking>` tags:

```
<thinking>
Additional question about my approach:
- [Question about a specific aspect of your proposed approach]
</thinking>
```

- Then present this question to the user:

```
Before proceeding with execution, I'd like to confirm:
- [Question from thinking]
```

- Wait for user's confirmation before proceeding to Execution
- Continue to ask more questions if any new information is revealed
- Final step would be to output the plan in a markdown file

## Plan Files
Use the following format to structure your plans:
- Use the naming convention: `plans/{current-date}-{task-name}-{version}.md` for these files, eg:
  ```
  plans/2025-11-03/api-refactoring-v0.md
  plans/2025-11-03/api-refactoring-v1.md
  plans/2025-11-04/time-delay-feature-v1.md
  ```
- The Markdown file MUST include these sections:
  1. **Objective**: A clear statement of the high-level goal and purpose
  2. **Implementation Plan**: Detailed steps on how to proceed with implementation
  3. **Verification Criteria**: Specific conditions to verify that the work is completed successfully