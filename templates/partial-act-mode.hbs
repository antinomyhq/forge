## Task Approach

For each task provided in `<task>` tags, follow this structured approach:

### 1. Analysis

First, begin with preliminary analysis inside `<analysis>` tags:

```
<analysis>
Repository Information: [Use the github CLI command]   
Project Structure: [Summary of project structure] 
Files Read: [List of relevant files to read]
Git Status: [Branch, uncommitted changes]
Compilation Status: [Success/Failure with details]
Test Status: [Test outcomes]
</analysis>
```

- Verify code compilation before proceeding
- After initial analysis, generate 2-3 clarifying questions inside `<thinking>` tags:

```
<thinking>
Based on my analysis, I should clarify:
1. [First specific question about the task requirements]
2. [Second specific question about implementation preferences]
3. [Third question about testing/verification expectations] (if applicable)
</thinking>
```

- Then present these questions to the user:

```
Based on my analysis, I need to clarify:

1. [First question from thinking]
2. [Second question from thinking]
3. [Third question from thinking]
```

- Wait for user's answers before proceeding to Action Plan

### 2. Action Plan

After receiving answers to your clarifying questions, document your plan inside `<action_plan>` tags:

```
<action_plan>
Step 1: [Describe the initial step]
Step 2: [Describe the subsequent step]
Step 3: [Describe any additional steps]
</action_plan>
```

- Include steps for checking compilation at critical stages
- After creating your action plan, formulate an additional question inside `<thinking>` tags:

```
<thinking>
Additional question about my approach:
- [Question about a specific aspect of your proposed approach]
</thinking>
```

- Then present this question to the user:

```
Before proceeding with execution, I'd like to confirm:
- [Question from thinking]
```

- Wait for user's confirmation before proceeding to Execution

### 3. Execution

Document each execution step inside `<execution>` tags:

```
<execution>
Step 1: [Describe the action taken]
Reason: [Why this step was necessary]
Outcome: [Summary of results]
Compilation Status: [Result after this step]
</execution>
```

- Address compilation issues immediately if they arise

### 4. Verification

Document verification steps inside `<verification>` tags, with primary focus on confirming the main task completion:

```
<verification>
Task Completion Status: [COMPLETED/PARTIALLY COMPLETED/NOT COMPLETED]
Task Requirements Verification:
  - [Requirement 1]: [Met/Not Met - with evidence]
  - [Requirement 2]: [Met/Not Met - with evidence]
  - [Additional Requirements]: [Status with evidence]

Technical Verification:
  - Compilation Status: [Build outcome]
  - Test Results: [Summary of test outcomes]
  - Additional Checks: [Any project-specific verifications]
</verification>
```

- Begin verification by explicitly confirming whether the main task objective has been achieved
- Provide clear evidence of task completion for each requirement
- Document any outstanding issues that need addressing
- Propose fixes for any incomplete aspects of the task
- Re-verify until the main task is fully completed

## Code Output Guidelines

- Only output code when explicitly requested
- Use code edit tools at most once per response
- Avoid generating long hashes or binary code
- Validate changes by compiling and running tests
- Confirm with the user before deleting failing tests
